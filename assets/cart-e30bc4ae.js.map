{"version":3,"file":"cart-e30bc4ae.js","sources":["../../src/js/cart.js"],"sourcesContent":["const cartItemsQuantity = document.querySelector(\".js-cart-items-quantity\"); // Місце де буде оновлюватись кількість товарів в кошику\nconst cartEmpty = document.querySelector(\".js-cart-empty\");\nconst cartContainer = document.querySelector(\".js-cart-container\");\nconst deleteAllBtn = document.querySelector('.js-delete-all-btn');\nconst cartSelectedProducts = document.querySelector(\".js-cart-selected-products\");\nconst cartOrderDetails = document.querySelector(\".js-cart-order-details\");\nconst totalOrderedPrice = document.querySelector(\".js-total-ordered-price\");\nconst form = document.querySelector(\".js-email-form\");\nconst btnCheckout = document.querySelector(\".js-email-checkout\");\nconst input = document.querySelector(\".input\")\n\nconst cartAmount = document.querySelector('.cart-amount')\n\n\nconsole.log(\"Test start\");\n// За замовчуванням сторінка кошика буде пустою.\n// cartEmptyHidden();\n// cartContainerHidden();\n\n// ФУНКЦІЯ ПЕРЕВІРКИ ЛОКАЛЬНОГО СХОВИЩА НА ВМІСТ ДАНИХ\nfunction localStorageCheck() { // ****** пізніше підшаманити, щоб просто повертати результат сховище, а логіку відпрацьовувати далі поза функцією.\n  const savedProducts = localStorage.getItem(\"cart\");\n  return   JSON.parse(savedProducts); //повертаю розпарсені дані з ЛС або null якщо там нічого не має\n}\n// savedProducts ?   : null\n\nconst parsedSavedProducts = localStorageCheck(); // результат повернення передаю змінній Розпарсених даних\nconsole.log(parsedSavedProducts) //тест\n\n\n\n\n//-----------------------------------------------------------------------------------------------------------------\n// parsedSavedProducts повинен повернути ось це:\n// const exampleLS = [\n//   {category: \"Fresh_Produce\",\n//     img: \"https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e383b.png\",\n//     is10PercentOff:    false,\n//     name:    \"Ackee\",\n//     popularity:    2099,\n//     price:   8.99,\n//     size:    \"16 oz\",\n//     _id: \"640c2dd963a319ea671e383b\"},\n\n//     { category: \"Pantry_Items\",\n//     img: \"https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e3814.png\",\n//     is10PercentOff:    false,\n//     name:    \"Almonds\",\n//     popularity:    616,\n//     price:   8.99,\n//     size:    \"16 oz bag\",\n//     _id: \"640c2dd963a319ea671e3814\"},\n    \n//     { category: \"Pantry_Items\",\n//     img: \"https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e383b.png\",\n//     is10PercentOff:    false,\n//     name:    \"Ackee\",\n//     popularity:    2099,\n//     price:   8.99,\n//     size:    \"16 oz\",\n//     _id: \"640c2dd963a319ea671e383b\"},\n//     { category: \"Pantry_Items\",\n//     img: \"https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e3660.png\"    ,\n//     is10PercentOff:    false,\n//     name:    \"Apple Cider Vinegar\"   ,\n//     popularity:    435,\n//     price:   6.99    ,\n//     size:    \"500 ml\",\n//     _id: \"640c2dd963a319ea671e3660\"},\n//     { category: \"Pantry_Items\",\n//     img: \"https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e383b.png\",\n//     is10PercentOff:    false,\n//     name:    \"Ackee\",\n//     popularity:    2099,\n//     price:   8.99,\n//     size:    \"16 oz\",\n//     _id: \"640c2dd963a319ea671e383b\"},\n//     { category: \"Pantry_Items\",\n//     img: \"https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e3660.png\"    ,\n//     is10PercentOff:    false,\n//     name:    \"Apple Cider Vinegar\"   ,\n//     popularity:    435,\n//     price:   6.99    ,\n//     size:    \"500 ml\",\n//     _id: \"640c2dd963a319ea671e3660\"}\n//   ]\n// console.log(exampleLS);\n\n\n// НЕ ВИДАЛЯТИ!!!!!!!!!!!!!!!!!!!!!!\n// // Функція перевірки об`єктів в масиві отриманого зі сховища і повернення лише унікальних значень.\n// const seen = new Set(); // Створюємо пустий Set для відстеження унікальних значень\n// const uniqueProductsArray = parsedSavedProducts.filter(obj => {\n//   const value = obj._id; // В нашому прикладі вибираємо значення \"id\" для порівняння унікальності\n//   if (seen.has(value)) {\n//     return false; // Значення вже було, це не унікальний об'єкт\n//   }\n//   seen.add(value); // Додаємо значення до Set, оскільки це унікальне\n//   return true; // Об'єкт є унікальним і буде включений до результату\n// });\n\n// console.log(uniqueProductsArray);\n// Якщо треба буде перевіряти масив зі сховища, щоб дані не повторювались, тоді використаю цю функцію, а далі для роблти в решті коду буду передавати отриманий масив унікальних об`єктів.\n\n\n\n//ФУНКЦІЯ ПІДРАХУНКУ СУМИ i РЕНДЕРУ ЇЇ В HTML\nfunction totalSumMarkup (array) {\n    // метод редюс буде рахувати мені суму цін за всі продукти. Потім цей результат я буду передавати в Тотал під час перевірки.\n    const sumPrice = array.reduce((acc, currentProduct)=>{\n      return acc + currentProduct.price;\n        }, 0).toFixed(2);\n\n      totalOrderedPrice.innerHTML = `$${sumPrice}`;\n  }\n\n\n// Всюди замість exampleLS треба використвувати оригінал, тобто parsedSavedProducts\nif (parsedSavedProducts !== null) {\n  cartItemsQuantity.innerHTML = parsedSavedProducts.length;\n\n  cartAmount.innerHTML = parsedSavedProducts.length;\n\n  cartEmptyHidden();\n  cartContainerShow();\n  \n  //-------Тут треба буде глянути що саме повертається і в якому вигляді.\n  const { _id, name, img, category, size, price } = parsedSavedProducts; // повинен повертатись об`єкт за запитом до сховища. Тому одразу роблю його деструктуризацію, щоб потім відмальовувати розмітку.\n//   const { ProductId, ProductName, ProductImg, ProductCategory, ProductSize, ProductPrice } = parsedSavedProducts; - або в такому вигляді буде повертатись.\n  \n// Повернення масиву об`єктів і відмальовування їх\n  const productsArrayMarkup = parsedSavedProducts.map(el => {\n    return selectedProductsMarkup(el._Id, el.name, el.img, el.category, el.size, el.price) \n    // return selectedProductsMarkup(el._id, el.Productame, el.ProductImg, el.ProductCategory, el.ProductSize, el.ProductPrice) -або так\n  }).join('');\n  // cartItemsQuantity.innerHTML = parsedSavedProducts.length;\n  cartSelectedProducts.innerHTML = productsArrayMarkup;\n  cartItemsQuantity.innerHTML = parsedSavedProducts.length;\n\n  totalSumMarkup(parsedSavedProducts);\n\n  document.querySelector('.cart-remove-product-btn').addEventListener('click', deleterProduct); // після відмальовки розмітки вішаю слухача на копку закриття. Але через безпосередній пошук, бо змінна не підтягується з гори.\n\n\n// Поверення одного об`єкту і відмальовування його.\n//   const productMarkup = selectedProductsMarkup(id, name, img, category, size, price);\n//   cartSelectedProducts.innerHTML = productMarkup;\n\n } else {\n  cartItemsQuantity.innerHTML = 0;\n  cartEmptyShow();\ncartContainerHidden();\n }\n\n\n\n    // Слухач на форму по сабміту а ще треба буде по кліку на кнопку\nform.addEventListener('change', (event) => {\n    event.preventDefault();\n    console.log(input.value) \n    input.value = \"\";\n})\n//Слухач на кнопку Сабміту\nbtnCheckout.addEventListener('click', (event) => {\n  event.preventDefault();\n  console.log('Submit successful')\n\n  // після сабмі/замовлення можемо видалити дані зі сховища та приховати\n  cartEmptyShow();\n  cartContainerHidden();\n  cartItemsQuantity.innerHTML = 0;\n  // totalOrderedPrice.innerHTML = 0;\n  cartSelectedProducts.innerHTML = \"\";\n\n// потім тут прописати відкриття модалки про успішні закупи.\n\n\n})\n\n\n\n\n\n// Слухач на кнопку видалення всього\ndeleteAllBtn.addEventListener('click', removeLocalStorage);\n// ФУНКЦІЯ ОЧИЩЕННЯ СХОВИЩА ВІД ВСІХ ПРОДУКТІВ\nfunction removeLocalStorage(event){\n    event.preventDefault();\n    localStorage.removeItem('cart'); // очищую сховище (за моїм ключем)\n    // localStorage.clear(); - або все очистити \n    cartSelectedProducts.innerHTML = \"\";\n    cartContainerHidden(); // приховую контейнер кошика\n    cartEmptyShow();             // показую пустий кошик\n// cartEmptyHidden();\n// cartContainerHidden();\ncartItemsQuantity.innerHTML = 0;\n}\n\n\n// ФУНКЦІЯ ВІДМАЛЬОВУВАННЯ ОБРАНИХ ТОВАРІВ\nfunction selectedProductsMarkup(\n  productId,\n  productName,\n  productImg,\n  productCategory,\n  productSize,\n  productPrice\n) {\n  return `\n<div class=\"selected-item\" id=\"${productId}\">\n    <button class=\"cart-remove-product-btn\"><svg class=\"js-delete-product-icon\"><use href=\"./img/icons.svg#icon-ion_close-sharp\"></use></svg></button>\n    <div class=\"js-selected-item-img\"><img class='js-product-item-img' src=\"${productImg}\" alt=\"Product\"></div>\n    <div class=\"js-selected-item-descroption\">\n        <p class=\"js-item-product-name\">${productName}</p>\n        <p class=\"js-item-product-properties\">Category: <span class=\"js-item-product-descr\">${productCategory}</span> Size: <span class=\"js-item-product-descr\">${productSize}</span></p>\n        <p class=\"js-item-product-price\">$${productPrice}</p>\n    </div>\n</div>\n<p class=\"underline\"></p>\n`\n}\n\n\n\n\n\n// функції помічники які будуть викликатись навзаєм в залежності від того чи в локальному сховищі щось є\n\n// ФУНКЦІЯ ПОКАЗУ ПОРОЖНЬОГО КОШИКА - EMPTY\nfunction cartEmptyShow () {\n    cartEmpty.style.display = 'flex';\n}\n// ФУНКЦІЯ ПРИХОВУВАННЯ ПОРОЖНЬОГО КОШИКА - EMPTY\nfunction cartEmptyHidden () {\n    cartEmpty.style.display = 'none';\n}\n\n\n// ФУНКЦІЯ ПОКАЗУ ПОРОЖНЬОГО КОНТЕЙНЕРУ\nfunction cartContainerShow () {\n    cartContainer.style.display = 'flex';\n}\n// ФУНКЦІЯ Приховування ПОРОЖНЬОГО КОНТЕЙНЕРУ\n// --------- буду викликати функцію яка приховує вміст коли отриманий результат запиту буде не порожнім\nfunction cartContainerHidden () {\n    cartContainer.style.display = 'none';\n}\n\n\nconsole.log(\"Test end\");\n\n\n\n\n\n\n\n    // 2 спосіб\n    cartSelectedProducts.addEventListener('click', deleterProduct);\n    function deleterProduct (event) {\n      console.log('i`m alive');\n\n      if (event.target.closest('.cart-remove-product-btn').nodeName !== \"BUTTON\") { // перевіряю чи поточний елемент на який відбувється кліє не є кнопкою, якщо правда, то виходимо з функції одразу, якщо це кнопка, то йдемо далі.\n  return\n} \n\nconsole.log('try2')\n\n        const clickedRemoveBtn = event.target;\n        const itemId = clickedRemoveBtn.getAttribute(\"data-id\");\n        const cartArray = localStorageCheck();\n        console.log(cartArray);\n\n        const itemIndexToRemove = cartArray.findIndex(product => product.id === itemId);\n\n        if (itemIndexToRemove !== -1) {\n            // Видаляємо елемент за індексом\n            cartArray.splice(itemIndexToRemove, 1);\n            // totalSumMarkup(cartArray);\n    \n            // Оновлюємо localStorage один раз після видалення всіх потрібних елементів\n            localStorage.setItem('cart', JSON.stringify(cartArray));\n        }\n\n        if (cartArray.length > 0) {\n//Якщо елементи є в масиві тоді перераховуємо суму \ntotalSumMarkup(cartArray);\n            // Якщо є елементи у кошику\n            \n            return cartArray;\n        } else {\n            cartSelectedProducts.innerHTML = \"\";\n            cartContainerHidden(); // приховую контейнер кошика\n            cartEmptyShow();       // показую пустий кошик\n            cartItemsQuantity.innerHTML = 0;\n        }\n    };\n     \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// 1 спосіб\n//ФУНКЦІЯ ВИДАЛЕННЯ ОДНОГО ПРОДУКТУ З КОШИКУ\n\n// cartRemoveProductBtn.addEventListener('click', (event) => {\n//     const clickedRemoveBtn = event.currentTarget;\n//     const itemId = clickedRemoveBtn.getAttribute(\"data-id\");\n//     const cartArray = localStorageCheck();\n    \n//     const newCartArray = cartArray.filter(product => product.id !== itemId);\n//     localStorage.setItem('cart', JSON.stringify(newCartArray));\n    \n//     if (newCartArray.length > 0) {\n//         return newCartArray;\n//     } else {\n//         cartSelectedProducts.innerHTML = \"\";\n//         cartContainerHidden(); // приховую контейнер кошика\n//         cartEmptyShow();             // показую пустий кошик\n//     }\n//         });\n\n\n\n\n\n\n\n\n\n\n\n// // Тест----------------------------------------------------------\n// const testObject = [ { \n//   id: '640c2dd963a319ea671e383b',\n//   name: 'Ackee', \n//   img: 'https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e383b.png', \n//   category: 'Fresh_Produce',\n//   price: 8.99, \n//   size: 16 \n// }, \n// { \n//     id: '640c2dd963a319ea671e383b',\n//     name: 'Ackee', \n//     img: 'https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e383b.png', \n//     category: 'Fresh_Produce',\n//     price: 8.99, \n//     size: 16 \n//   }, \n//   { \n//     id: '640c2dd963a319ea671e383b',\n//     name: 'Ackee', \n//     img: 'https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e383b.png', \n//     category: 'Fresh_Produce',\n//     price: 8.99, \n//     size: 16 \n//   }, \n//   { \n//     id: '640c2dd963a319ea671e383b',\n//     name: 'Ackee', \n//     img: 'https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e383b.png', \n//     category: 'Fresh_Produce',\n//     price: 8.99, \n//     size: 16 \n//   }, \n//   { \n//     id: '640c2dd963a319ea671e383b',\n//     name: 'Ackee', \n//     img: 'https://ftp.goit.study/img/so-yummy/ingredients/640c2dd963a319ea671e383b.png', \n//     category: 'Fresh_Produce',\n//     price: 8.99, \n//     size: 16 \n//   }\n// ] \n\n\n\n// const { id, name, img, category, price, size} = testObject;\n//    const markup  = selectedProductsMarkup(id, name, img, category, price, size);\n  \n//    const productsArrayMarkup = testObject.map(el => {\n    \n//     return selectedProductsMarkup(el.id, el.name, el.img, el.category, el.size, el.price)\n//   }).join('');\n\n//   cartSelectedProducts.innerHTML = productsArrayMarkup;\n\n//   cartSelectedProducts.addEventListener('click', deleterProduct);\n\n// totalSumMarkup(testObject);\n// cartItemsQuantity.innerHTML = testObject.length\n// localStorageCheck();\n\n\n\n\n\n\n\n// const localStorageResult = parsedSavedProducts ? parsedSavedProducts.length : 0; // Далі умова, якщо після парсингу дані є, то записую їх кількість в змінну, але якщо немає, тоді записую нуль. \n//   cartItemsQuantity.innerHTML = localStorageResult; //отриманий результат передаю в HTML\n  // На разі закоментую\n  // const { name, img, category, size, price } = parsedSavedProducts; // повинен повертатись об`єкт за запитом до сховища. Тому одразу роблю його деструктуризацію, щоб потім відмальовувати розмітку.\n  // метод редюс буде рахувати мені суму цін за всі продукти. Потім цей результат я буду передавати в Тотал під час перевірки.\n//   const sumPrice = parsedSavedProducts.reduce((acc, currentProduct)=>{\n// return acc + currentPrice.price;\n//   }  , 0) \n\n//   if (savedProducts.length === 0) {\n//     // або пустий масив/об`єкт null/undefined (потім подивитись що повертається і підкорегувати логіку)\n//     // ТОДІ виклик функції яка покаже нашу порожню розмітку пустого кошику і приховає розмітку товарів.\n// // cartEmptyShow();\n// // cartContainerHidden();\n//   } else {\n//     // Якщо масив не порожній, тоді приховуємо розмітку порожнього масиву і показужмо розмітку товарів.\n// //     cartEmptyHidden();\n// // cartContainerShow();\n\n//     //     // виклик функції з відмалюванням даних продукту i передача її результату в дівчик\n//     //     const productMarkup = selectedProductsMarkup();\n//     //     cartSelectedProducts.innerHTML = productMarkup;\n//     //Реалізую переший варіант і просто буду показувати або приховувати цей блок в залежності від результату ( і буду викликати функцію показу (треба її ще написати))\n//     // // виклик функції з відмальовуванням даних замовлення і передача її результату в дівчик\n//     // const detailsMarkup = orderDetailsMarkup ();\n//     // cartOrderDetails.innerHTML = detailsMarkup;\n\n\n// // передаємо суму цін в Тотал\n//     // totalOrderedPrice.innerHTML = `$${sumPrice}`;\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// function removeProductLocalStorage (productItemId) {\n//     cartSelectedProducts.innerHTML = \"\"; // очищення розмітки при виклику функції\n//  // Отримуємо дані про кошик з локального сховища\n\n// const cartCheck = JSON.parse(localStorage.getItem('cart')) || {};\n\n// // const itemId = cartRemoveProductBtn.getAttribute(\"data-id\");\n// // const productIndexRemove = cartSelectedProducts.findIndex()\n\n// }\n\n// const productIndexRemove = cartSelectedProducts.findIndex()\n\n\n\n\n\n\n\n\n\n\n\n\n\n// На разі закую її просто в розмітку і буду приховувати або показувати в залежності від результату\n// // ФУНКЦІЯ ВІДМАЛЬОВУВАННЯ ДЕТАЛЕЙ ЗАМОВЛЕННЯ\n// function orderDetailsMarkup (totalPrice) { // в totalPrice буде передватись результат редьюсу який я вирахую пізніше.\n// return `\n// <h2><b>YOUR ORDER</b></h2>\n// <div>\n// <h3><b>Total</b></h3>\n// <p>Sum: <h2>$${totalPrice}</h2></p>\n// </div>\n// <input type=\"text\" placeholder=\"Mail: Enter your email\" pattern=\"[a-zA-Z0-9\\-.]+\">\n// <button type=\"submit\">Checkout</button>\n// `\n// }\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// НА РАЗІ ЦЕ НЕ ПОТРІБНО БО МИ БУДЕМО ПРИХОВУВАТИ УВЕСЬ КОНТЕЙНЕР\n// // ФУНКЦІЯ ПРИХОВУВАННЯ ДЕТАЛЕЙ ЗАМОВЛЕННЯ\n// function orderDetailsHidden() {\n//   cartOrderDetails.style.display = \"none\";\n// }\n// // ФУНКЦІЯ ПОКАЗУ ДЕТАЛЕЙ ЗАМОВЛЕННЯ\n// function orderDetailsShow() {\n//   cartOrderDetails.style.display = \"block\";\n// }"],"names":["cartItemsQuantity","cartEmpty","cartContainer","deleteAllBtn","cartSelectedProducts","totalOrderedPrice","form","btnCheckout","input","cartAmount","localStorageCheck","savedProducts","parsedSavedProducts","totalSumMarkup","array","sumPrice","acc","currentProduct","cartEmptyHidden","cartContainerShow","productsArrayMarkup","el","selectedProductsMarkup","deleterProduct","cartEmptyShow","cartContainerHidden","event","removeLocalStorage","productId","productName","productImg","productCategory","productSize","productPrice","itemId","cartArray","itemIndexToRemove","product"],"mappings":"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"}